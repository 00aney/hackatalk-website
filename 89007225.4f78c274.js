(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=b(n),d=a,h=p["".concat(l,".").concat(d)]||p[d]||u[d]||i;return n?r.a.createElement(h,o(o({ref:t},s),{},{components:n})):r.a.createElement(h,o({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},102:function(e,t,n){"use strict";var a=n(0),r=n(20);t.a=function(){const e=Object(a.useContext)(r.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},103:function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return l}));var a=n(102),r=n(105);function i(){const{siteConfig:{baseUrl:e="/",url:t}={}}=Object(a.a)();return{withBaseUrl:(n,a)=>function(e,t,n,{forcePrependBaseUrl:a=!1,absolute:i=!1}={}){if(!n)return n;if(n.startsWith("#"))return n;if(Object(r.b)(n))return n;if(a)return t+n;const l=!n.startsWith(t)?t+n.replace(/^\//,""):n;return i?e+l:l}(t,e,n,a)}}function l(e,t={}){const{withBaseUrl:n}=i();return n(e,t)}},105:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!a(e)}n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return r}))},75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),i=(n(0),n(101)),l=(n(103),{id:"features",title:"Features",sidebar_label:"Features"}),o={unversionedId:"development/features",id:"development/features",isDocsHomePage:!1,title:"Features",description:"Features mainly describe what services we provide to HackaTalk users. We generally provide one-to-one as well as group chats. We like to provide and try out things that can be done modern chat app.",source:"@site/docs/development/features.md",permalink:"/docs/development/features",sidebar_label:"Features",sidebar:"docs",previous:{title:"Authentication",permalink:"/docs/development/authentication"},next:{title:"Pagination",permalink:"/docs/development/pagination"}},c=[{value:"Creating Channel",id:"creating-channel",children:[{value:"Updating or deleting Channel",id:"updating-or-deleting-channel",children:[]}]},{value:"Adding friends to your chat app",id:"adding-friends-to-your-chat-app",children:[]},{value:"Start messaging",id:"start-messaging",children:[]}],s={rightToc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Features mainly describe what services we provide to ",Object(i.b)("inlineCode",{parentName:"p"},"HackaTalk")," users. We generally provide ",Object(i.b)("strong",{parentName:"p"},"one-to-one")," as well as ",Object(i.b)("strong",{parentName:"p"},"group")," chats. We like to provide and try out things that can be done modern chat app."),Object(i.b)("h2",{id:"creating-channel"},"Creating Channel"),Object(i.b)("img",{src:"useBaseUrl('img/create-channel.png')}",width:"200"}),Object(i.b)("p",null,"Creating ",Object(i.b)("inlineCode",{parentName:"p"},"channel")," is like creating ",Object(i.b)("inlineCode",{parentName:"p"},"chatroom"),". If the user creates the channel selecting others users whom user wants to invite to chat, this will also be a ",Object(i.b)("inlineCode",{parentName:"p"},"private")," channel as well as ",Object(i.b)("inlineCode",{parentName:"p"},"1-1 chat"),". We have another channel type ",Object(i.b)("inlineCode",{parentName:"p"},"public")," and this is used for public messaging. To create a ",Object(i.b)("inlineCode",{parentName:"p"},"public")," channel, user will type on the ",Object(i.b)("inlineCode",{parentName:"p"},"name")," of channel and get unique id for the ",Object(i.b)("inlineCode",{parentName:"p"},"channel"),". Then the user can invite other users to the ",Object(i.b)("inlineCode",{parentName:"p"},"public")," channel. To list of the senario there are 3 types in general."),Object(i.b)("br",null),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"createChannel(channel: ChannelCreateInput): Channel\n")),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"1-1 private chat",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"User select one user when creating ",Object(i.b)("inlineCode",{parentName:"li"},"Channel"),"."))),Object(i.b)("li",{parentName:"ol"},"M-M private chat",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"User create channel with multiple users.",Object(i.b)("blockquote",{parentName:"li"},Object(i.b)("p",{parentName:"blockquote"},"Note that the private channel will not be created again if the same list of users already exists in the ",Object(i.b)("inlineCode",{parentName:"p"},"Channel"),"."))))),Object(i.b)("li",{parentName:"ol"},"M-M public chat",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"User create channel with only the name of channel.",Object(i.b)("blockquote",{parentName:"li"},Object(i.b)("p",{parentName:"blockquote"},"Note that this can be duplicated (name, list of users ...).")))))),Object(i.b)("br",null),Object(i.b)("p",null,"When ",Object(i.b)("inlineCode",{parentName:"p"},"User")," creates ",Object(i.b)("inlineCode",{parentName:"p"},"Channel"),", he or she will create ",Object(i.b)("inlineCode",{parentName:"p"},"Membership"),". This will manage the ",Object(i.b)("inlineCode",{parentName:"p"},"role")," of each user in the ",Object(i.b)("inlineCode",{parentName:"p"},"Channel")," as well as ",Object(i.b)("inlineCode",{parentName:"p"},"alertMode"),". The ",Object(i.b)("inlineCode",{parentName:"p"},"alertMode")," allows you to ",Object(i.b)("inlineCode",{parentName:"p"},"mute")," specific channel or change the sound mode to ",Object(i.b)("inlineCode",{parentName:"p"},"vibrate"),". Their relationship as in ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://techterms.com/definition/rdbms"}),"RDBMS")," looks like below."),Object(i.b)("img",{src:"useBaseUrl('img/channel-membership-user-rds.png')}",width:"400"}),Object(i.b)("br",null),Object(i.b)("h3",{id:"updating-or-deleting-channel"},"Updating or deleting Channel"),Object(i.b)("p",null,"Only the ",Object(i.b)("inlineCode",{parentName:"p"},"Role")," with the ",Object(i.b)("inlineCode",{parentName:"p"},"owner")," can update the channels. We follow the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://guides.cfwheels.org/docs/soft-delete"}),"soft delete")," senario for main models which are ",Object(i.b)("inlineCode",{parentName:"p"},"User")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Channel"),". Other sub models that can be refered as ",Object(i.b)("inlineCode",{parentName:"p"},"cascade")," will not follow the ",Object(i.b)("inlineCode",{parentName:"p"},"soft deletion"),"."),Object(i.b)("br",null),Object(i.b)("h2",{id:"adding-friends-to-your-chat-app"},"Adding friends to your chat app"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"HacakTalk")," allows users to search all users who've signed up."),Object(i.b)("img",{src:"useBaseUrl('img/search-users.png')}",width:"200"}),Object(i.b)("p",null,"From above screen which is ",Object(i.b)("inlineCode",{parentName:"p"},"SearchUser"),", you can add user to the friend list or chat directly."),Object(i.b)("h2",{id:"start-messaging"},"Start messaging"),Object(i.b)("img",{src:"useBaseUrl('img/chat.png')}",width:"200"}),Object(i.b)("p",null,"When user tries to chat to new user and the ",Object(i.b)("inlineCode",{parentName:"p"},"Channel")," doesn't exists, it will automatically creates one internally. This flow follows ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#creating-channel"}),"Creating channel")," flow described above."),Object(i.b)("p",null,"Currently we provide 3 types of messages."),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Text"),Object(i.b)("li",{parentName:"ol"},"Photo"),Object(i.b)("li",{parentName:"ol"},"File")))}b.isMDXComponent=!0}}]);